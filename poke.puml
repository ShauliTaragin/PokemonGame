@startuml
'https://plantuml.com/class-diagram


client o-- Play_game
Play_game o-- Arena
Play_game o-- Window
Arena o-- Agent
Arena o-- Pokemon
Arena o-- GraphAlgo
Pokemon o-- Edge
Window o-- client

GeoLocation o-- Node
GeoLocation o-- Edge
GeoLocation o-- Agent
DiGraph o-- Node
DiGraph o-- Edge
GraphAlgo o-- MinHeapDijkstra
GraphAlgo o-- DiGraph
MinHeapDijkstra o-- minHeap



class  client{
start_connection(self, ip, port)
__send_message(self, msg)
get_agents(self)
add_agent(self, json_of_node)
get_graph(self)
get_info(self)
get_pokemons(self)
is_running(self)
time_to_end(self)
start(self)
stop(self)
move(self)
choose_next_edge(self, next_agent_node_json)
}
class Play_game{
calculate_time_of_path(arena: Arena, list_of_stops: list)
get_all_permutations(pokemon_list)
AllocateAgent(agents_list, pokemon: Pokemon, arena: Arena)
dist_between_points(self, point1: GeoLocation, point2: GeoLocation)
run_game(self)
thread_function(self, client_of_thread, time_to_sleep)

self.moves
self.grade
self.id
self.scanerio_num
}

class Arena{
update_pokemons_lst(self, json_file, first_iter: bool)
update_agent_lst(self, json_file, already_exists: bool)
place_agents_at_beginning(self, first_pokemons: list)
update_game_info(self, game_info)

self.pokemons_lst
self.agents_lst
self.graph_algo
self.info_dict
self.dijkstra_list
self.client
}
class Window{
 self.graph_algo
self.agents
self.pokemons
self.pygame
self.screen
self.clock
self.num_of_moves
self.num_of_grade
self.time_to_end
self.draw_game

draw_arrow_lines(self, scr: pygame.Surface, x1, y1, x2, y2, d, h)
draw_game(self)
scale(data, min_screen, max_screen, min_data, max_data)
my_scale(data, x, y)

}
class Agent{
self.id
self.value
self.src
self.dest
self.speed
self.pos
self.curr_node
self.current_time_of_path
self.agents_path
self.pokemons_to_eat
self.permutaion

update_from_given_values(self, pos, speed, dest, src, valu)


}
class Pokemon{
self.value
self.type
self.pos
self.curr_edge
}

class Edge{
line_equation(self)
get_point_on_edge(self, x)

self.src
self.dst
self.weight
self.edge_type
self.src_location
self.dst_location
self.m, self.b

}

class GeoLocation{
rang_to_other(self, other_location: tuple)
get_has_tuple(self)

self.x
self.y
self.z

}
class GraphAlgo {
get_graph()
load_from_json(self, file_name: str)
save_to_json(self, file_name: str)
shortest_path(self, id1: int, id2: int)
graph:DiGraph
}

class DiGraph {

}

class MinHeapDijkstra{

}

class minHeap {

}



class Node{
_repr_(self)
_str_(self)
add_out_edge(self, weight: float, dest: int)
add_in_edge(self, weight: float, src: int)
key:int
weight:float
geolocation:tuple
tag:int
outEdges:dict
inEdges:dict
}


@enduml